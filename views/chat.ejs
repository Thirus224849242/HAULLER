<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* Global Reset (unchanged) */
* { margin: 0; padding: 0; box-sizing: border-box; }

/* Base body & font */
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #f4f6f8;          /* light gray */
  display: flex;
  height: 100vh;
  color: #333;
}

/* User List Sidebar */
.user-list {
  width: 260px;
  background: #ffffff;           /* white card */
  border-right: 1px solid #e2e5ea;
  box-shadow: 2px 0 5px rgba(0,0,0,0.03);
  overflow-y: auto;
  padding: 20px 0;
}
.user-list h3 {
  margin: 0 20px 15px;
  font-size: 1.1rem;
  color: #2c3e50;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}
.user-list button {
  width: 100%;
  padding: 12px 20px;
  border: none;
  background: #f9fafb;
  color: #4a5a6a;
  text-align: left;
  cursor: pointer;
  transition: background 0.2s, color 0.2s;
  border-bottom: 1px solid #e2e5ea;
  font-size: 0.95rem;
}
.user-list button:hover {
  background: #eef2f7;
}
.user-list button.active {
  background: #007bff;           /* EMS roster blue */
  color: #fff;
}

/* Chat Container as Card */
.chat-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #ffffff;
  border-radius: 8px;
  margin: 20px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.05);
  overflow: hidden;
  position: relative;
}

/* Header (same blue bar from roster) */
header {
  background: #007bff;
  color: #fff;
  padding: 16px;
  font-size: 1.3rem;
  text-align: center;
}

/* “Chatting with…” bar */
#chatWith {
  padding: 12px 24px;
  border-bottom: 1px solid #e2e5ea;
  background: #f7f9fc;
  font-weight: 600;
  color: #2c3e50;
}

/* Chat Box area */
#chatBox {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  background: #f0f4fa;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

/* Message bubbles as little cards */
.bubble {
  max-width: 65%;
  padding: 14px 18px;
  border-radius: 12px;
  position: relative;
  word-wrap: break-word;
  line-height: 1.5;
  font-size: 0.95rem;
  box-shadow: 0 1px 4px rgba(0,0,0,0.1);
}
.sender {
  align-self: flex-end;
  background: #007bff;
  color: #fff;
  border-bottom-right-radius: 4px;
}
.receiver {
  align-self: flex-start;
  background: #ffffff;
  color: #333;
  border-bottom-left-radius: 4px;
}
.bubble::after {
  content: '';
  position: absolute;
  bottom: 0;
  width: 0;
  height: 0;
}
.sender::after {
  right: -8px;
  border-left: 8px solid #007bff;
  border-top: 8px solid transparent;
  border-bottom: 8px solid transparent;
}
.receiver::after {
  left: -8px;
  border-right: 8px solid #ffffff;
  border-top: 8px solid transparent;
  border-bottom: 8px solid transparent;
}

/* Typing indicator dots (we kept the sine-wave from before) */
#typingIndicator {
  display: none;
  align-self: flex-start;
  margin-bottom: 10px;
  color: #007bff;
  font-size: 0.95rem;
}
#typingIndicator span {
  display: inline-block;
  width: 6px;
  height: 6px;
  margin: 0 2px;
  background: #007bff;
  border-radius: 50%;
  animation: wave 1s infinite ease-in-out;
}
#typingIndicator span:nth-child(1) { animation-delay: 0s; }
#typingIndicator span:nth-child(2) { animation-delay: 0.15s; }
#typingIndicator span:nth-child(3) { animation-delay: 0.3s; }
@keyframes wave {
  0%,100% { transform: translateY(0); }
  50%     { transform: translateY(-6px); }
}

/* Input Container styled like roster controls */
.input-container {
  position: sticky;
  bottom: 0;
  display: flex;
  align-items: center;
  padding: 12px 24px;
  border-top: 1px solid #e2e5ea;
  background: #ffffff;
}
#msgInput {
  flex: 1;
  padding: 12px 16px;
  border: 1px solid #c1c9d6;
  border-radius: 20px;
  font-size: 1rem;
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
}
#msgInput:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0,123,255,0.2);
}
button.send-btn {
  margin-left: 12px;
  padding: 12px 28px;
  background: #007bff;
  border: none;
  color: white;
  font-size: 1rem;
  border-radius: 20px;
  cursor: pointer;
  transition: background 0.2s;
}
button.send-btn:hover {
  background: #0056b3;
}

/* Responsive tweaks (unchanged) */
@media (max-width: 768px) {
  .user-list { display: none; }
  .chat-container { margin: 0; border-radius: 0; }
}

  </style>
</head>
<body>

  <div class="user-list" id="userList">
    <h3>Users</h3>
    <% otherUsers.forEach((user, index) => { %>
      <button 
        class="<%= index === 0 ? 'active' : '' %>" 
        data-id="<%= user._id.toString() %>" 
        data-name="<%= user.name %>" 
        onclick="switchChat(this)"><img 
  src="<%= user.image || '/media/image.png' %>" 
  onerror="this.onerror=null; this.src='/media/default-user.png';"
  alt="User" 
  class="rounded-circle" 
  style="width: 36px; height: 36px; object-fit: cover; border: 2px solid #e2e5ea; border-radius: 50%;">

        <%= user.name %>
      </button>
    <% }) %>
  </div>

  <div class="chat-container">
    <header> <%= currentUser.name %>! </header>
    <div id="chatWith"><%= otherUsers.length > 0 ? otherUsers[0].name : 'No one' %> <div id="typingIndicator"></div></div>
    <div id="chatBox">
 
</div>

    <div class="input-container">
      <input id="msgInput" type="text" placeholder="Type a message..." autocomplete="off" />
      <button class="send-btn" onclick="sendMessage()">Send</button>
    </div>
  </div>

  <script>
    const socket = io();
    const currentUserId = "<%= currentUser._id.toString() %>";
    const currentUserName = "<%= currentUser.name %>";
    const messages = {};
    let currentChatUserId = document.querySelector('.user-list button.active')?.dataset.id || null;
    let currentChatname = document.querySelector('.user-list button.active')?.dataset.name || null;

    if(currentChatUserId) {
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    function switchChat(button) {
      document.querySelectorAll('.user-list button').forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      currentChatUserId = button.dataset.id;
      currentChatname = button.dataset.name;
      document.getElementById('chatWith').innerText = 'Chatting with ' + currentChatname;
      const chatBox = document.getElementById('chatBox');
      chatBox.innerHTML = '';
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
      if (messages[currentChatUserId]) {
        messages[currentChatUserId].forEach(msg => appendMessage(msg.senderId, msg.message));
      }
    }

    function appendMessage(senderId, message) {
      const chatBox = document.getElementById('chatBox');
      const bubble = document.createElement('div');
      bubble.classList.add('bubble', senderId === currentUserId ? 'sender' : 'receiver');
      bubble.innerText = message;
      chatBox.appendChild(bubble);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function sendMessage() {
      const input = document.getElementById('msgInput');
      const message = input.value.trim();
      if (!message || !currentChatUserId) return;
      socket.emit('privateMessage', { senderId: currentUserId, receiverId: currentChatUserId, message ,senderName:currentUserName});
      if (!messages[currentChatUserId]) messages[currentChatUserId] = [];
      messages[currentChatUserId].push({ senderId: currentUserId, message });
      appendMessage(currentUserId, message);
      input.value = '';
      socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    let typingTimeout;
    const msgInput = document.getElementById('msgInput');
    const typingIndicator = document.getElementById('typingIndicator');

    msgInput.addEventListener('input', () => {
      if (!currentChatUserId) return;
      socket.emit('typing', { senderId: currentUserId, receiverId: currentChatUserId, senderName: currentUserName });
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
      }, 1000);
    });

    socket.on('newMessage', ({ senderId, message }) => {
      if (!messages[senderId]) messages[senderId] = [];
      messages[senderId].push({ senderId, message });
      if (senderId === currentChatUserId) appendMessage(senderId, message);
    });

    socket.on('displayTyping', ({ senderId, senderName }) => {
      if (senderId === currentChatUserId) {
        typingIndicator.style.display = 'block';
        typingIndicator.innerText =  'is typing';
      }
    });

    socket.on('hideTyping', ({ senderId }) => {
      if (senderId === currentChatUserId) typingIndicator.innerText = '';
       typingIndicator.style.display = 'none'; 
    });
  </script>
</body>
</html>