

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
     /* Global Reset */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #e0e5ec;
      display: flex;
      height: 100vh;
      color: #333;
    }

    /* User List Sidebar */
    .user-list {
      width: 240px;
      background: #f7f9fc;
      border-right: 1px solid #d1d9e6;
      overflow-y: auto;
      padding: 20px 0;
    }
    .user-list h3 {
      margin: 0 20px 15px;
      font-size: 1.2rem;
      color: #4a5a6a;
    }
    .user-list button {
      width: 100%;
      padding: 12px 20px;
      border: none;
      background: #ffffff;
      color: #4a5a6a;
      text-align: left;
      cursor: pointer;
      transition: background 0.3s;
      border-bottom: 1px solid #d1d9e6;
      font-size: 0.95rem;
    }
    .user-list button:last-child { border-bottom: none; }
    .user-list button:hover { background: #eef2f7; }
    .user-list button.active { background: #4a90e2; color: #fff; }

    /* Chat Container */
    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: #ffffff;
      border-radius: 0 8px 8px 0;
      overflow: hidden;
      position: relative;
    }
    header {
      background: linear-gradient(135deg, #4a90e2, #50e3c2);
      color: white;
      padding: 16px;
      font-size: 1.4rem;
      text-align: center;
    }
    #chatWith {
      padding: 12px 20px;
      font-weight: bold;
      border-bottom: 1px solid #d1d9e6;
      background: #f0f4fa;
      color: #4a5a6a;
    }

    /* Chat Box */
    #chatBox {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      padding-bottom: 100px;
      background: #f0f4fa;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    #chatBox::-webkit-scrollbar { width: 8px; }
    #chatBox::-webkit-scrollbar-track { background: #e0e5ec; border-radius: 4px; }
    #chatBox::-webkit-scrollbar-thumb { background: #b0b8c5; border-radius: 4px; }

    .bubble {
      max-width: 70%;
      padding: 12px 16px;
      border-radius: 20px;
      position: relative;
      word-wrap: break-word;
      line-height: 1.4;
      font-size: 0.95rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      background: transparent;
    }
    .sender {
      align-self: flex-end;
      background: #4a90e2;
      color: white;
      border-bottom-right-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .receiver {
      align-self: flex-start;
      background: #ffffff;
      color: #333;
      border-bottom-left-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .bubble::after {
      content: '';
      position: absolute;
      bottom: 0;
      width: 0;
      height: 0;
    }
    .sender::after {
      right: -8px;
      border-left: 8px solid #4a90e2;
      border-top: 8px solid transparent;
      border-bottom: 8px solid transparent;
    }
    .receiver::after {
      left: -8px;
      border-right: 8px solid #ffffff;
      border-top: 8px solid transparent;
      border-bottom: 8px solid transparent;
    }

    /* Typing Indicator (Prominent Animated Dots) */
    #typingIndicator {
      display: none;
      align-self: flex-start;
      padding: 6px 12px;
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid #d1d9e6;
      border-radius: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      font-size: 0.95rem;
      color: #4a90e2;
      position: relative;
      margin-bottom: 10px;
      min-width: 40px;
      text-align: center;
    }
    #typingIndicator::after {
      content: '';
      display: inline-block;
      width: 6px;
      height: 6px;
      margin: 0 2px;
      background: #4a90e2;
      border-radius: 50%;
       animation: wave 1s infinite ease-in-out;
      box-shadow: 10px 0 0 #4a90e2, 20px 0 0 #4a90e2;
    }
    @keyframes wave {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-6px); }
    }

    /* Input Container */
    .input-container {
      position: sticky;
      bottom: 0;
      display: flex;
      padding: 12px 20px;
      border-top: 1px solid #d1d9e6;
      background: #f7f9fc;
      z-index: 10;
    }
    #msgInput {
      flex: 1;
      padding: 12px 15px;
      border: 1px solid #c1c9d6;
      border-radius: 20px;
      font-size: 1rem;
      outline: none;
      transition: border-color 0.3s;
    }
    #msgInput:focus { border-color: #4a90e2; }
    button.send-btn {
      margin-left: 12px;
      padding: 12px 24px;
      background: #4a90e2;
      border: none;
      color: white;
      font-size: 1rem;
      border-radius: 20px;
      cursor: pointer;
      transition: background 0.3s;
    }
    button.send-btn:hover { background: #3f7ac1; }

    /* Responsive */
    @media (max-width: 768px) {
      .user-list { display: none; }
      .chat-container { border-radius: 0; }
    }
  </style>
</head>
<body>

  <div class="user-list" id="userList">
    <h3>Users</h3>
    <% otherUsers.forEach((user, index) => { %>
      <button 
        class="<%= index === 0 ? 'active' : '' %>" 
        data-id="<%= user._id.toString() %>" 
        data-name="<%= user.name %>" 
        onclick="switchChat(this)">
        <%= user.name %>
      </button>
    <% }) %>
  </div>

  <div class="chat-container">
    <header>Welcome, <%= currentUser.name %>!</header>
    <div id="chatWith">Chatting with <%= otherUsers.length > 0 ? otherUsers[0].name : 'No one' %></div>
    <div id="chatBox"></div>
    <div id="typingIndicator"></div>
    <div class="input-container">
      <input id="msgInput" type="text" placeholder="Type a message..." autocomplete="off" />
      <button class="send-btn" onclick="sendMessage()">Send</button>
    </div>
  </div>

  <script>
    const socket = io();
    const currentUserId = "<%= currentUser._id.toString() %>";
    const currentUserName = "<%= currentUser.name %>";
    const messages = {};
    let currentChatUserId = document.querySelector('.user-list button.active')?.dataset.id || null;
    let currentChatname = document.querySelector('.user-list button.active')?.dataset.name || null;

    if(currentChatUserId) {
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    function switchChat(button) {
      document.querySelectorAll('.user-list button').forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      currentChatUserId = button.dataset.id;
      currentChatname = button.dataset.name;
      document.getElementById('chatWith').innerText = 'Chatting with ' + currentChatname;
      const chatBox = document.getElementById('chatBox');
      chatBox.innerHTML = '';
      socket.emit('joinRoom', { senderId: currentUserId, receiverId: currentChatUserId });
      if (messages[currentChatUserId]) {
        messages[currentChatUserId].forEach(msg => appendMessage(msg.senderId, msg.message));
      }
    }

    function appendMessage(senderId, message) {
      const chatBox = document.getElementById('chatBox');
      const bubble = document.createElement('div');
      bubble.classList.add('bubble', senderId === currentUserId ? 'sender' : 'receiver');
      bubble.innerText = message;
      chatBox.appendChild(bubble);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function sendMessage() {
      const input = document.getElementById('msgInput');
      const message = input.value.trim();
      if (!message || !currentChatUserId) return;
      socket.emit('privateMessage', { senderId: currentUserId, receiverId: currentChatUserId, message ,senderName:currentUserName});
      if (!messages[currentChatUserId]) messages[currentChatUserId] = [];
      messages[currentChatUserId].push({ senderId: currentUserId, message });
      appendMessage(currentUserId, message);
      input.value = '';
      socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
    }

    let typingTimeout;
    const msgInput = document.getElementById('msgInput');
    const typingIndicator = document.getElementById('typingIndicator');

    msgInput.addEventListener('input', () => {
      if (!currentChatUserId) return;
      socket.emit('typing', { senderId: currentUserId, receiverId: currentChatUserId, senderName: currentUserName });
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { senderId: currentUserId, receiverId: currentChatUserId });
      }, 1000);
    });

    socket.on('newMessage', ({ senderId, message }) => {
      if (!messages[senderId]) messages[senderId] = [];
      messages[senderId].push({ senderId, message });
      if (senderId === currentChatUserId) appendMessage(senderId, message);
    });

    socket.on('displayTyping', ({ senderId, senderName }) => {
      if (senderId === currentChatUserId) {
        typingIndicator.style.display = 'block';
        typingIndicator.innerText = `${senderName} is typing`;
      }
    });

    socket.on('hideTyping', ({ senderId }) => {
      if (senderId === currentChatUserId) typingIndicator.innerText = '';
       typingIndicator.style.display = 'none'; 
    });
  </script>
</body>
</html>

